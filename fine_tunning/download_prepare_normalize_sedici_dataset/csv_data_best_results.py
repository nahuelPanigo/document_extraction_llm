import pandas as pd
from constant import DATA_FOLDER,JSON_FOLDER,CSV_FOLDER
from utils.read_and_write_files import write_to_json,read_data_json
import ast
import json

# csv con los matchs
csv_file =  "results_full_pdf_text_patter_ids.csv"
#csv_file =  "results_full_pfd_text.csv"
check_json_file = "metadata_to_check4.json"
#json to read metadata to make results dict and remove false determinate attr
metadata_json = "metadata_sedici_files_changes3.json"
values_to_add =["dc.language","dc.description.abstract","dc.subject","dc.title","dc.type",
                "sedici.creator.person","sedici.subject.materias","mods.originInfo.place",
                "sedici.relation.journalTitle","sedici.relation.journalVolumeAndIssue",
                "sedici.identifier.issn","sedici.title.subtitle","sedici.date.exposure",
                "sedici.contributor.director","sedici.contributor.codirector","sedici.identifier.isbn"
                ]#,"sedici.description.fulltext","sedici.subtype"]


ok_80 = ['ARG-UNLP-ART-0000000002', 'ARG-UNLP-ART-0000000009', 'ARG-UNLP-ART-0000000018', 'ARG-UNLP-ART-0000000025', 'ARG-UNLP-ART-0000000043', 'ARG-UNLP-ART-0000000045', 'ARG-UNLP-ART-0000000046', 'ARG-UNLP-ART-0000000054', 'ARG-UNLP-ART-0000000056', 'ARG-UNLP-ART-0000000094', 'ARG-UNLP-ART-0000000100', 'ARG-UNLP-ART-0000000131', 'ARG-UNLP-ART-0000000169', 'ARG-UNLP-ART-0000000170', 'ARG-UNLP-ART-0000000174', 'ARG-UNLP-ART-0000000435', 'ARG-UNLP-ART-0000000545', 'ARG-UNLP-ART-0000000546', 'ARG-UNLP-ART-0000005871', 'ARG-UNLP-ART-0000006019', 'ARG-UNLP-ART-0000006020', 'ARG-UNLP-ART-0000006021', 'ARG-UNLP-ART-0000006029', 'ARG-UNLP-ART-0000006031', 'ARG-UNLP-ART-0000006042', 'ARG-UNLP-ART-0000006048', 'ARG-UNLP-ART-0000006049', 'ARG-UNLP-ART-0000006053', 'ARG-UNLP-ART-0000006059', 'ARG-UNLP-ART-0000006062', 'ARG-UNLP-ART-0000006066', 
'ARG-UNLP-ART-0000006082', 'ARG-UNLP-ART-0000006084', 'ARG-UNLP-ART-0000006098', 'ARG-UNLP-ART-0000006126', 'ARG-UNLP-ART-0000006130', 'ARG-UNLP-ART-0000006486', 'ARG-UNLP-ART-0000006880', 'ARG-UNLP-ART-0000006881', 'ARG-UNLP-ART-0000006925', 'ARG-UNLP-ART-0000006926', 'ARG-UNLP-ART-0000007431', 'ARG-UNLP-ART-0000007438', 'ARG-UNLP-ART-0000007439', 'ARG-UNLP-ART-0000007441', 'ARG-UNLP-ART-0000007518', 'ARG-UNLP-ART-0000007663', 'ARG-UNLP-ART-0000007665', 'ARG-UNLP-ART-0000007884', 'ARG-UNLP-ART-0000007886', 'ARG-UNLP-ART-0000007888', 'ARG-UNLP-ART-0000007890', 'ARG-UNLP-ART-0000007891', 'ARG-UNLP-ART-0000007893', 'ARG-UNLP-ART-0000007904', 'ARG-UNLP-ART-0000007909', 'ARG-UNLP-ART-0000007982', 'ARG-UNLP-DIS-0000001638', 'ARG-UNLP-DIS-0000001641', 'ARG-UNLP-DIS-0000001642', 'ARG-UNLP-DIS-0000001659', 'ARG-UNLP-DIS-0000001678', 'ARG-UNLP-DIS-0000001679', 'ARG-UNLP-DIS-0000001681', 'ARG-UNLP-DIS-0000001683', 'ARG-UNLP-DIS-0000001841', 'ARG-UNLP-DIS-0000001842', 'ARG-UNLP-TDG-0000000050', 'ARG-UNLP-TDG-0000000057', 'ARG-UNLP-TDG-0000000064', 'ARG-UNLP-TDG-0000000072', 'ARG-UNLP-TDG-0000000079', 'ARG-UNLP-TDG-0000000104', 'ARG-UNLP-TDG-0000000112', 'ARG-UNLP-TDG-0000000125', 'ARG-UNLP-TDG-0000000130', 'ARG-UNLP-TDG-0000000132', 'ARG-UNLP-TDG-0000000145', 'ARG-UNLP-TDG-0000000153', 'ARG-UNLP-TDG-0000000162', 'ARG-UNLP-TDG-0000000164', 'ARG-UNLP-TDG-0000000173', 'ARG-UNLP-TDG-0000000174', 'ARG-UNLP-TDG-0000000175', 'ARG-UNLP-TDG-0000000178', 'ARG-UNLP-TDG-0000000184', 'ARG-UNLP-TDG-0000000187', 'ARG-UNLP-TDG-0000000204', 'ARG-UNLP-TDG-0000000207', 'ARG-UNLP-TDG-0000000209', 'ARG-UNLP-TDG-0000000251', 'ARG-UNLP-TDG-0000000252', 'ARG-UNLP-TDG-0000000253', 'ARG-UNLP-TDG-0000000255', 'ARG-UNLP-TDG-0000000267', 'ARG-UNLP-TDG-0000000284', 'ARG-UNLP-TDG-0000000294', 'ARG-UNLP-TDG-0000000311', 'ARG-UNLP-TDG-0000000318', 'ARG-UNLP-TDG-0000000319', 'ARG-UNLP-TDG-0000000321', 'ARG-UNLP-TDG-0000000323', 'ARG-UNLP-TDG-0000000324', 'ARG-UNLP-TDG-0000000326', 'ARG-UNLP-TDG-0000000337', 'ARG-UNLP-TDG-0000000342', 'ARG-UNLP-TDG-0000000350', 'ARG-UNLP-TDG-0000000354', 'ARG-UNLP-TDG-0000000369', 'ARG-UNLP-TDG-0000000381', 'ARG-UNLP-TDG-0000000397', 'ARG-UNLP-TDG-0000000399', 'ARG-UNLP-TDG-0000000400', 'ARG-UNLP-TDG-0000000401', 'ARG-UNLP-TDG-0000000413', 'ARG-UNLP-TDG-0000000415', 'ARG-UNLP-TDG-0000000416', 'ARG-UNLP-TDG-0000000428', 'ARG-UNLP-TDG-0000000429', 'ARG-UNLP-TDG-0000000430', 'ARG-UNLP-TDG-0000000434', 'ARG-UNLP-TDG-0000000435', 'ARG-UNLP-TDG-0000000437', 'ARG-UNLP-TDG-0000000438', 'ARG-UNLP-TDG-0000000450', 'ARG-UNLP-TDG-0000000456', 'ARG-UNLP-TDG-0000000457', 'ARG-UNLP-TDG-0000000458', 'ARG-UNLP-TDG-0000000459', 'ARG-UNLP-TDG-0000000460', 'ARG-UNLP-TDG-0000000463', 'ARG-UNLP-TDG-0000000469', 'ARG-UNLP-TDG-0000000474', 'ARG-UNLP-TDG-0000000475', 'ARG-UNLP-TDG-0000000476', 'ARG-UNLP-TDG-0000000480', 'ARG-UNLP-TDG-0000000485', 
'ARG-UNLP-TDG-0000000488', 'ARG-UNLP-TDG-0000000489', 'ARG-UNLP-TDG-0000000505', 'ARG-UNLP-TDG-0000000508', 'ARG-UNLP-TDG-0000000509', 'ARG-UNLP-TDG-0000000511', 'ARG-UNLP-TDG-0000000512', 'ARG-UNLP-TDG-0000000514', 'ARG-UNLP-TDG-0000000515', 'ARG-UNLP-TDG-0000000519', 'ARG-UNLP-TDG-0000000523', 'ARG-UNLP-TDG-0000000524', 'ARG-UNLP-TDG-0000000525', 'ARG-UNLP-TDG-0000000531', 'ARG-UNLP-TDG-0000000534', 'ARG-UNLP-TDG-0000000539', 'ARG-UNLP-TDG-0000000542', 'ARG-UNLP-TDG-0000000543', 'ARG-UNLP-TDG-0000000547', 'ARG-UNLP-TDG-0000000550', 'ARG-UNLP-TDG-0000000551', 'ARG-UNLP-TDG-0000000552', 'ARG-UNLP-TDG-0000000553', 'ARG-UNLP-TDG-0000000557', 'ARG-UNLP-TDG-0000000562', 'ARG-UNLP-TDG-0000000563', 'ARG-UNLP-TDG-0000000564', 'ARG-UNLP-TDG-0000000567', 'ARG-UNLP-TDG-0000000568', 'ARG-UNLP-TDG-0000000570', 'ARG-UNLP-TDG-0000000571', 'ARG-UNLP-TDG-0000000573', 'ARG-UNLP-TDG-0000000574', 'ARG-UNLP-TDG-0000000576', 'ARG-UNLP-TDG-0000000579', 'ARG-UNLP-TDG-0000000581', 'ARG-UNLP-TDG-0000000583', 'ARG-UNLP-TDG-0000000586', 'ARG-UNLP-TDG-0000000587', 'ARG-UNLP-TDG-0000000588', 'ARG-UNLP-TDG-0000000590', 'ARG-UNLP-TDG-0000000591', 'ARG-UNLP-TDG-0000000593', 'ARG-UNLP-TDG-0000000594', 'ARG-UNLP-TDG-0000000601', 'ARG-UNLP-TDG-0000000602', 'ARG-UNLP-TDG-0000000603', 'ARG-UNLP-TDG-0000000607', 'ARG-UNLP-TDG-0000000611', 'ARG-UNLP-TDG-0000000612', 'ARG-UNLP-TDG-0000000615', 'ARG-UNLP-TDG-0000000616', 'ARG-UNLP-TDG-0000000617', 'ARG-UNLP-TDG-0000000619', 'ARG-UNLP-TDG-0000000627', 'ARG-UNLP-TDG-0000000629', 'ARG-UNLP-TDG-0000000853', 'ARG-UNLP-TDG-0000000854', 'ARG-UNLP-TDG-0000000856', 'ARG-UNLP-TDG-0000000857', 'ARG-UNLP-TDG-0000000858', 'ARG-UNLP-TDG-0000000861', 'ARG-UNLP-TDG-0000000872', 'ARG-UNLP-TDG-0000000873', 'ARG-UNLP-TDG-0000000874', 'ARG-UNLP-TDG-0000000922', 'ARG-UNLP-TDG-0000000925', 'ARG-UNLP-TDG-0000000976', 'ARG-UNLP-TDG-0000000980', 'ARG-UNLP-TDG-0000000990', 'ARG-UNLP-TDG-0000000991', 'ARG-UNLP-TDG-0000001000', 'ARG-UNLP-TDG-0000001002', 'ARG-UNLP-TDG-0000001003', 'ARG-UNLP-TDG-0000001004', 'ARG-UNLP-TDG-0000001005', 'ARG-UNLP-TDG-0000001007', 'ARG-UNLP-TDG-0000001009', 'ARG-UNLP-TDG-0000001052', 'ARG-UNLP-TDG-0000001062', 'ARG-UNLP-TDG-0000001065', 'ARG-UNLP-TDG-0000001066', 'ARG-UNLP-TDG-0000001071', 'ARG-UNLP-TDG-0000001073', 'ARG-UNLP-TDG-0000001091', 'ARG-UNLP-TDG-0000001092', 'ARG-UNLP-TDG-0000001094', 'ARG-UNLP-TDG-0000001102', 'ARG-UNLP-TDG-0000001103', 'ARG-UNLP-TDG-0000001104', 'ARG-UNLP-TDG-0000001107', 'ARG-UNLP-TDG-0000001108', 'ARG-UNLP-TDG-0000001110', 'ARG-UNLP-TDG-0000001111', 'ARG-UNLP-TPG-0000000018', 'ARG-UNLP-TPG-0000000023', 'ARG-UNLP-TPG-0000000033', 'ARG-UNLP-TPG-0000000099', 'ARG-UNLP-TPG-0000000100', 'ARG-UNLP-TPG-0000000107', 'ARG-UNLP-TPG-0000000108', 'ARG-UNLP-TPG-0000000111', 'ARG-UNLP-TPG-0000000115', 'ARG-UNLP-TPG-0000000118', 'ARG-UNLP-TPG-0000000119', 'ARG-UNLP-TPG-0000000120', 
'ARG-UNLP-TPG-0000000122', 'ARG-UNLP-TPG-0000000124', 'ARG-UNLP-TPG-0000000126', 'ARG-UNLP-TPG-0000000130', 'ARG-UNLP-TPG-0000000131', 'ARG-UNLP-TPG-0000000141', 'ARG-UNLP-TPG-0000000163', 'ARG-UNLP-TPG-0000000171', 'ARG-UNLP-TPG-0000000174', 'ARG-UNLP-TPG-0000000176', 'ARG-UNLP-TPG-0000000178', 'ARG-UNLP-TPG-0000000179', 'ARG-UNLP-TPG-0000000182', 'ARG-UNLP-TPG-0000000183', 'ARG-UNLP-TPG-0000000184', 'ARG-UNLP-TPG-0000000185', 'ARG-UNLP-TPG-0000000187', 'ARG-UNLP-TPG-0000000189', 'ARG-UNLP-TPG-0000000191', 'ARG-UNLP-TPG-0000000192', 'ARG-UNLP-TPG-0000000193', 'ARG-UNLP-TPG-0000000194', 'ARG-UNLP-TPG-0000000198', 'ARG-UNLP-TPG-0000000200', 'ARG-UNLP-TPG-0000000204', 'ARG-UNLP-TPG-0000000205', 'ARG-UNLP-TPG-0000000206', 'ARG-UNLP-TPG-0000000208', 'ARG-UNLP-TPG-0000000211', 'ARG-UNLP-TPG-0000000212', 'ARG-UNLP-TPG-0000000214', 'ARG-UNLP-TPG-0000000216', 'ARG-UNLP-TPG-0000000218', 'ARG-UNLP-TPG-0000000219', 'ARG-UNLP-TPG-0000000220', 'ARG-UNLP-TPG-0000000222', 'ARG-UNLP-TPG-0000000223', 'ARG-UNLP-TPG-0000000224', 'ARG-UNLP-TPG-0000000225', 'ARG-UNLP-TPG-0000000226', 'ARG-UNLP-TPG-0000000229', 'ARG-UNLP-TPG-0000000235', 'ARG-UNLP-TPG-0000000237', 'ARG-UNLP-TPG-0000000240', 'ARG-UNLP-TPG-0000000241', 'ARG-UNLP-TPG-0000000242', 'ARG-UNLP-TPG-0000000244', 'ARG-UNLP-TPG-0000000246', 'ARG-UNLP-TPG-0000000247', 'ARG-UNLP-TPG-0000000248', 'ARG-UNLP-TPG-0000000249', 'ARG-UNLP-TPG-0000000250', 'ARG-UNLP-TPG-0000000251', 'ARG-UNLP-TPG-0000000255', 'ARG-UNLP-TPG-0000000256', 'ARG-UNLP-TPG-0000000259', 'ARG-UNLP-TPG-0000000261', 'ARG-UNLP-TPG-0000000262', 'ARG-UNLP-TPG-0000000263', 'ARG-UNLP-TPG-0000000264', 'ARG-UNLP-TPG-0000000265', 'ARG-UNLP-TPG-0000000266', 'ARG-UNLP-TPG-0000000269', 'ARG-UNLP-TPG-0000000271', 'ARG-UNLP-TPG-0000000272', 'ARG-UNLP-TPG-0000000275', 'ARG-UNLP-TPG-0000000276', 'ARG-UNLP-TPG-0000000279', 'ARG-UNLP-TPG-0000000280', 'ARG-UNLP-TPG-0000000282', 'ARG-UNLP-TPG-0000000283', 'ARG-UNLP-TPG-0000000284', 'ARG-UNLP-TPG-0000000285', 'ARG-UNLP-TPG-0000000286', 'ARG-UNLP-TPG-0000000287', 'ARG-UNLP-TPG-0000000290', 'ARG-UNLP-TPG-0000000291', 'ARG-UNLP-TPG-0000000293', 'ARG-UNLP-TPG-0000000295', 'ARG-UNLP-TPG-0000000296', 'ARG-UNLP-TPG-0000000297', 'ARG-UNLP-TPG-0000000307', 'ARG-UNLP-TPG-0000000312', 'ARG-UNLP-TPG-0000000318', 'ARG-UNLP-TPG-0000000321', 'ARG-UNLP-TPG-0000000322', 'ARG-UNLP-TPG-0000000323', 'ARG-UNLP-TPG-0000000325', 'ARG-UNLP-TPG-0000000326', 'ARG-UNLP-TPG-0000000327', 'ARG-UNLP-TPG-0000000329', 'ARG-UNLP-TPG-0000000331', 'ARG-UNLP-TPG-0000000335', 'ARG-UNLP-TPG-0000000358', 'ARG-UNLP-TPG-0000000362', 'ARG-UNLP-TPG-0000000368', 'ARG-UNLP-TPG-0000000369', 'ARG-UNLP-TPG-0000000374', 'ARG-UNLP-TPG-0000000375', 'ARG-UNLP-TPG-0000000391', 'ARG-UNLP-TPG-0000000399', 'ARG-UNLP-TPG-0000000404', 'ARG-UNLP-TPG-0000000408', 'ARG-UNLP-TPG-0000000412', 'ARG-UNLP-TPG-0000000413', 'ARG-UNLP-TPG-0000000415', 
'ARG-UNLP-TPG-0000000422', 'ARG-UNLP-TPG-0000000424', 'ARG-UNLP-TPG-0000000427', 'ARG-UNLP-TPG-0000000430', 'ARG-UNLP-TPG-0000000431', 'ARG-UNLP-TPG-0000000432', 'ARG-UNLP-TPG-0000000433', 'ARG-UNLP-TPG-0000000437', 'ARG-UNLP-TPG-0000000438', 'ARG-UNLP-TPG-0000000439', 'ARG-UNLP-TPG-0000000440', 'ARG-UNLP-TPG-0000000443', 'ARG-UNLP-TPG-0000000444', 'ARG-UNLP-TPG-0000000445', 'ARG-UNLP-TPG-0000000446', 'ARG-UNLP-TPG-0000000450', 'ARG-UNLP-TPG-0000000452', 'ARG-UNLP-TPG-0000000453', 'ARG-UNLP-TPG-0000000457', 'ARG-UNLP-TPG-0000000458', 'ARG-UNLP-TPG-0000000460', 'ARG-UNLP-TPG-0000000465', 'ARG-UNLP-TPG-0000000470', 'ARG-UNLP-TPG-0000000475', 'ARG-UNLP-TPG-0000000477', 'ARG-UNLP-TPG-0000000480', 'ARG-UNLP-TPG-0000000497', 'ARG-UNLP-TPG-0000000539', 'ARG-UNLP-TPG-0000000546', 'ARG-UNLP-TPG-0000000577', 'ARG-UNLP-TPG-0000000579', 'ARG-UNLP-TPG-0000000595', 'ARG-UNLP-TPG-0000000602', 'ARG-UNLP-TPG-0000000603', 'ARG-UNLP-TPG-0000000605', 'ARG-UNLP-TPG-0000000606', 'ARG-UNLP-TPG-0000000607', 'ARG-UNLP-TPG-0000000608', 'ARG-UNLP-TPG-0000000610', 'ARG-UNLP-TPG-0000000620', 'ARG-UNLP-TPG-0000000626', 'ARG-UNLP-TPG-0000000629', 'ARG-UNLP-TPG-0000000631', 'ARG-UNLP-TPG-0000000633', 'ARG-UNLP-TPG-0000000634', 'ARG-UNLP-TPG-0000000635', 'ARG-UNLP-TPG-0000000637', 'ARG-UNLP-TPG-0000000639', 'ARG-UNLP-TPG-0000000640', 'ARG-UNLP-TPG-0000000642', 'ARG-UNLP-TPG-0000000643', 'ARG-UNLP-TPG-0000000644', 'ARG-UNLP-TPG-0000000645', 'ARG-UNLP-TPG-0000000646', 'ARG-UNLP-TPG-0000000652', 'ARG-UNLP-TPG-0000000654', 'ARG-UNLP-TPG-0000000655', 'ARG-UNLP-TPG-0000000656', 'ARG-UNLP-TPG-0000000657', 'ARG-UNLP-TPG-0000000659', 'ARG-UNLP-TPG-0000000661', 'ARG-UNLP-TPG-0000000665', 'ARG-UNLP-TPG-0000000666', 'ARG-UNLP-TPG-0000000672', 'ARG-UNLP-TPG-0000000673', 'ARG-UNLP-TPG-0000000675', 'ARG-UNLP-TPG-0000000676', 'ARG-UNLP-TPG-0000000679', 'ARG-UNLP-TPG-0000000680', 'ARG-UNLP-TPG-0000000681', 'ARG-UNLP-TPG-0000000682', 'ARG-UNLP-TPG-0000000683', 'ARG-UNLP-TPG-0000000685', 'ARG-UNLP-TPG-0000000686', 'ARG-UNLP-TPG-0000000687', 'ARG-UNLP-TPG-0000000691', 'ARG-UNLP-TPG-0000000693', 'ARG-UNLP-TPG-0000000694', 'ARG-UNLP-TPG-0000000695', 'ARG-UNLP-TPG-0000000697', 'ARG-UNLP-TPG-0000000698', 'ARG-UNLP-TPG-0000000700', 'ARG-UNLP-TPG-0000000701', 'ARG-UNLP-TPG-0000000702', 'ARG-UNLP-TPG-0000000703', 'ARG-UNLP-TPG-0000000704', 'ARG-UNLP-TPG-0000000706', 'ARG-UNLP-TPG-0000000707', 'ARG-UNLP-TPG-0000000708', 'ARG-UNLP-TPG-0000000711', 'ARG-UNLP-TPG-0000000712', 'ARG-UNLP-TPG-0000000713', 'ARG-UNLP-TPG-0000000714', 'ARG-UNLP-TPG-0000000715', 'ARG-UNLP-TPG-0000000718', 'ARG-UNLP-TPG-0000000719', 'ARG-UNLP-TPG-0000000723', 'ARG-UNLP-TPG-0000000724', 'ARG-UNLP-TPG-0000000727', 'ARG-UNLP-TPG-0000000729', 'ARG-UNLP-TPG-0000000730', 'ARG-UNLP-TPG-0000000731', 'ARG-UNLP-TPG-0000000732', 'ARG-UNLP-TPG-0000000733', 'ARG-UNLP-TPG-0000000734', 'ARG-UNLP-TPG-0000000735', 
'ARG-UNLP-TPG-0000000736', 'ARG-UNLP-TPG-0000000737', 'ARG-UNLP-TPG-0000000745', 'ARG-UNLP-TPG-0000000748', 'ARG-UNLP-TPG-0000000750', 'ARG-UNLP-TPG-0000000752', 'ARG-UNLP-TPG-0000000754', 'ARG-UNLP-TPG-0000000755', 'ARG-UNLP-TPG-0000000756', 'ARG-UNLP-TPG-0000000757', 'ARG-UNLP-TPG-0000000758', 'ARG-UNLP-TPG-0000000759', 'ARG-UNLP-TPG-0000000760', 'ARG-UNLP-TPG-0000000761', 'ARG-UNLP-TPG-0000000762', 'ARG-UNLP-TPG-0000000763', 'ARG-UNLP-TPG-0000000']


#make dict results only with keys from values_to_add and if all the keys avg is more than min_avg
def make_dict_best_averge_metadata(csv_file,min_avg):
    df = pd.read_csv(csv_file)
    actual_id=  df["id"].iloc[0]
    results = {}
    r = {}
    col_pass = ["dc.subject","dc.type","sedici.subject.materias"]
    for index, row in df.iterrows():
        if(row["clave"] in values_to_add):
            id = row["id"]
            res = ast.literal_eval(row["resultado"])
            if(id != actual_id):
                avg = sum(r.values())/len(r.values())
                if(avg > min_avg):
                    r["avg"] = avg
                    results[actual_id] = r
                r = {}
                actual_id = id
            try:
                if(row["clave"] in col_pass and id in ok_80):
                    print(row["clave"],id)
                    r[row["clave"]] = 1
                elif(isinstance(res,list)):
                    r[row["clave"]]=sum(res)/len(res)
                else:
                    r[row["clave"]]=int(res)
            except:
                print(res)
    return results


def make_dict_avg_by_types(results):
    types = {}
    for key in results.keys():
        for k,v in results[key].items():
            if(k not in types):
                types[k] = {}
                types[k]["sum"] = 0
                types[k]["total"] = 0
            types[k]["sum"] +=v
            types[k]["total"] +=1 
    return types


#make dict with the metadata of the approved_ids(ids with more than 90% giid attr) and only the attr filtered
def make_final_metadata(approved_ids):
    dict_metadata =  read_data_json(JSON_FOLDER+metadata_json ,"utf-8")
    return {
    k: {x: y for x, y in v.items() if x in values_to_add}
    for k, v in dict_metadata.items()
    if k in approved_ids
    }



#remove journaltitle origin place, issn, isbn and date exposure if not in the text and make json with attr to check for each document
def make_dict_values_to_check(results):
    final_dict = {}
    dict_metadata =  read_data_json(JSON_FOLDER+metadata_json ,"utf-8")
    values_to_chage = ["sedici.relation.journalTitle","mods.originInfo.place","sedici.identifier.issn","sedici.date.exposure","sedici.identifier.isbn"]
    values_to_ignore = ["sedici.relation.journalTitle","dc.type","mods.originInfo.place","dc.subject","sedici.subject.materias","sedici.identifier.issn","sedici.date.exposure","sedici.identifier.isbn"]
    for key in results.keys():
        r = []
        for k,v in results[key].items():
            if(k in values_to_ignore):
                if(k in values_to_chage):
                    try:
                        dict_metadata[key].pop(k)
                    except:
                        print("ERRR no esta la key",k)
            elif(int(v) != 1) and (k != "avg"):
                r.append(k)
        if r:
            final_dict[key]  = r
    #write_to_json(JSON_FOLDER+metadata_json,dict_metadata,"utf-8")
    return final_dict

results = make_dict_best_averge_metadata(DATA_FOLDER+csv_file,0.9)
dict_to_check=make_dict_values_to_check(results)
new_dict_metadata = make_final_metadata(results.keys())
write_to_json(JSON_FOLDER+"final_metadata_Chekced.json",new_dict_metadata,"utf-8")
write_to_json(DATA_FOLDER+check_json_file,dict_to_check,"utf-8")

#make avg for each key (avg of author, avg of director, avg of title)...
types=make_dict_avg_by_types(results)
for k,v in types.items():
    print("prom para k",k,"es",v["sum"]/v["total"]," los val son: ",v["sum"]," ",v["total"])
print(len(results.keys()))

